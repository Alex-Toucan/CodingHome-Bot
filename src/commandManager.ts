import * as fs from 'fs';
import * as path from 'path';
import {Collection} from "discord.js";
import {ICommand, isCommand} from "./command";

export class CommandManager {
	private commands: Collection<string, ICommand> = new Collection<string, ICommand>();

	constructor(dirPath: string) {
		this.loadCommandsFromDirectory(dirPath);
	}

	private loadCommandsFromDirectory(dirPath: string) {
		let content = fs.readdirSync(dirPath);

		// this filters out all the source map files generated by transpiling typescript. It can be turned off, but they are useful for debugging.
		content = content.filter(item => item.endsWith('.map') == false);

		for(const item of content) {
			if(!item.endsWith(".js")) {
				const itemPath = path.join(dirPath, item);
				const itemStat = fs.statSync(itemPath);

				if(itemStat.isDirectory()) this.loadCommandsFromDirectory(itemPath);
				continue;
			}

			const command = require(path.join(dirPath, item)).default;

			if(command === undefined) {
				console.log(`Trying to import a command from file '${item}' resulted in undefined, skipping. (Maybe missing an export default?)`);
				continue;
			}

			if(!isCommand(command)) {
				console.log(`The default export of file '${item}' doesn't appear to be a command, skipping.`);
				continue;
			}

			this.commands.set(command.data.name, command);
			console.log(`Successfully loaded command from file '${item}'`);
		}
	}

	public registerCommands(local: boolean = false) {
		
	}
}